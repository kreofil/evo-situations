#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>

// Класс Одиночка предоставляет метод `GetInstance`, который ведёт себя как
// альтернативный конструктор и позволяет клиентам получать один и тот же
// экземпляр класса при каждом вызове.
typedef struct Singleton {char value[256];} Singleton;
static Singleton* singleton = NULL;
static pthread_mutex_t mutex ; //двоичный семафор

// Конструктор Одиночки всегда должен быть скрытым, чтобы предотвратить
// создание объекта через оператор new.
static void SingletonInit(Singleton* s, char* value) {
  strcpy(s->value, value);
}

// Это статический метод, управляющий доступом к экземпляру одиночки. При
// первом запуске, он создаёт экземпляр одиночки и помещает его в
// статическое поле. При последующих запусках, он возвращает клиенту объект,
// хранящийся в статическом поле.
Singleton* GetInstance(char* value);

// Наконец, любой одиночка должен содержать некоторую бизнес-логику, которая
// может быть выполнена на его экземпляре.
void SomeBusinessLogic(Singleton* s)
{
    // ...
}

char* Value(Singleton* s) {
  return s->value;
}

// Static methods should be defined outside the class.
Singleton *GetInstance(char* value) {
  // This is a safer way to create an instance. instance = new Singleton is
  // dangeruous in case two instance threads wants to access at the same time
  pthread_mutex_lock(&mutex) ; //протокол входа в КС: закрыть двоичный семафор
  if(singleton == NULL) {
    singleton = malloc(sizeof(Singleton));
    strcpy(singleton->value, value);
  }
  //конец критической секции
  pthread_mutex_unlock(&mutex) ;  //протокол выхода из КС:
  //открыть двоичный семафор
  return singleton;
}

void* ThreadFoo(void* arg) {
  // Этот код эмулирует медленную инициализацию.
  sleep(1);
  Singleton* singleton = GetInstance("FOO");
  printf("%s\n", Value(singleton));
  return NULL;
}

void* ThreadBar(void* arg){
  // Этот код эмулирует медленную инициализацию.
  sleep(1);
  Singleton* singleton = GetInstance("BAR");
  printf("%s\n", Value(singleton));
  return NULL;
}


int main() {
  printf("If you see the same value, then singleton was reused (yay!\n"
    "If you see different values, then 2 singletons were created (booo!!)\n\n"
    "RESULT:\n");
  pthread_t t1;
  pthread_t t2;
  pthread_create(&t1, NULL,ThreadFoo, NULL);
  pthread_create(&t2, NULL,ThreadBar, NULL);
  pthread_join(t1,NULL);
  pthread_join(t2,NULL);

  return 0;
}