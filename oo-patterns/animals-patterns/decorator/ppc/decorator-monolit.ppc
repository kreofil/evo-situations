// Компилировать: ppclang -xc decorator-monolit.ppc -o decorator-monolit
#include <stdio.h>

// Обобщенное животное
typedef struct Animal {}<> Animal;
void GetInfo<Animal* a>() = 0;

// Утка
typedef struct Duck {} Duck;
Animal + <Duck;>;

void GetInfo<Animal.Duck* a>() {
  printf("I am the Duck");
};

// Собака
typedef struct Dog {} Dog;
Animal + <Dog;>;

void GetInfo<Animal.Dog* a>() {
  printf("I am the Dog");
};

//------------------------------------------------------------------------------
// Использование отдельных декораторов, непосредственно подключаемых к животным
//------------------------------------------------------------------------------

// Декоратор, добавляющий возраст
typedef struct AgeDecorator {int age;}<Animal;> AgeDecorator;
void InitAgeDecorator(AgeDecorator* a, int age) {
  a->age = age;
}
void GetAgeDecoratorInfo<AgeDecorator* d>() = 0;
// AgeDecorator + <Animal;>;
void GetAgeDecoratorInfo<AgeDecorator.Animal* d>() {
  // Перенаправление дальше на животного
  GetInfo<&(d->@)>();
  printf(", I am %d yeas old.", d->age);
}

Animal + <AgeDecorator;>;
void GetInfo<Animal.AgeDecorator* a>() {
  // Перенаправление дальше на животного
  struct AgeDecorator.Animal* d = (struct AgeDecorator.Animal*)&(a->@);
  GetInfo<(Animal*)&(d->@)>();
  printf(", I am %d yeas old.", a->@age);
}

// Декоратор, добавляющий имя
typedef struct NameDecorator {char* name;}<Animal;> NameDecorator;
void InitNameDecorator(NameDecorator* a, char* name) {
  a->name = name;
}

Animal + <NameDecorator;>;
void GetInfo<Animal.NameDecorator* a>() {
  printf("My name is %s. ", a->@name);
  // Перенаправление дальше на животного
  struct NameDecorator.Animal* d = (struct NameDecorator.Animal*)&(a->@);
  GetInfo<(Animal*)&(d->@)>();
}

// Клиент запускает сформированных животных
void ClientCode(Animal* a) {
  printf("\n");
  GetInfo<a>();
  printf("\n");
}

int main() {
  printf("Different Animals:\n");
  struct Animal.Duck duck;
  struct Animal.Dog  dog;

  ClientCode((Animal*)&duck);
  ClientCode((Animal*)&dog);

  struct Animal.AgeDecorator.Animal.Duck duckAge;
  InitAgeDecorator((AgeDecorator*)&(duckAge.@age), 2);
  ClientCode((Animal*)&duckAge);

  struct Animal.NameDecorator.Animal.AgeDecorator.Animal.Dog dogNameAge;
  InitNameDecorator((NameDecorator*)&(dogNameAge.@), "Rex");
  InitAgeDecorator((AgeDecorator*)&(dogNameAge.@.@.@), 10);
  ClientCode((Animal*)&dogNameAge);

  struct Animal.AgeDecorator.Animal.NameDecorator.Animal.Dog otherDogAgeName;
  InitAgeDecorator((AgeDecorator*)&(otherDogAgeName.@), 5);
  InitNameDecorator((NameDecorator*)&(otherDogAgeName.@.@.@), "Mu-mu");
  ClientCode((Animal*)&otherDogAgeName);

  return 0;
}