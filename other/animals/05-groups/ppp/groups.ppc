//==============================================================================
// groups.ppc - Реализация функций, обеспечивающих работу с группами животных
// Данная единица компиляции охватывает тех животных, которые определены
// к моменту создания этой функциональности.
//==============================================================================

#include <unistd.h>
#include <stdio.h>
#include "groups.pph"

// Инфоромация о группе к которой пренадлежит животное
// Животное передается в начале в качестве параметра
// AnimalGroups* GetAnimalGroup<AnyAnimal* a>();

//------------------------------------------------------------------------------
// Вывод информации о группе, к которой принадлежит животное

// Непосредственно для обобщения информацию выводить запрещено.
// Выводится сообщение об ошибке и происходит прерывание работы программы.
void AnimalGroupInfo<AnimalGroups* ag>() {
    printf("Обобщенная группа без специализации запрещена! Измените код!\n");
    exit(1);
}
//  Обработчик для млекопитающих
void AnimalGroupInfo<AnimalGroups.MammalGroup* ag>() {
    printf("Я есть млекопитающий\n");
}
//  Обработчик для птиц
void AnimalGroupInfo<AnimalGroups.BirdGroup* ag>() {
    printf("Я птица однако\n");
}
//  Обработчик для червей
void AnimalGroupInfo<AnimalGroups.WormGroup* ag>() {
    printf("Червяк я\n");
}

//------------------------------------------------------------------------------
// Получение информации о группе через обобщенного животного
// Используется прямое решение через полиморфные функции

// Обобщающая функция запрещает обработку
void Group<AnyAnimal* a>() {
    printf("Для обобщенного животного группа отсутствует! Измените код!\n");
    exit(1);
}
// Обработчик группы для слона
void Group<AnyAnimal.elephant* a>() {
    printf("Привет, я розовый слоненок. ");
    struct AnimalGroups.MammalGroup g;
    AnimalGroupInfo<&g>();
}
// Обработчик группы для собаки
void Group<AnyAnimal.dog* a>() {
    printf("Я маленький щенок. ");
    struct AnimalGroups.MammalGroup g;
    AnimalGroupInfo<&g>();
}
// Обработчик группы для пингвина
void Group<AnyAnimal.penguin* a>() {
    printf("Пингвин окошкам не товарищ. ");
    struct AnimalGroups.BirdGroup g;
    AnimalGroupInfo<&g>();
}
// Обработчик группы для червя
void Group<AnyAnimal.worm* a>() {
    printf("Моя задача - строить тоннели. ");
    struct AnimalGroups.WormGroup g;
    AnimalGroupInfo<&g>();
}
