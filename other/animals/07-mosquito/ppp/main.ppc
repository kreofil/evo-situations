//==============================================================================
// main.ppc - содержит главную функцию,
// обеспечивающую простое тестирование
//==============================================================================

#include <stdio.h>
#include "animals.pph"
#include "swimming-dog.pph" // Добавим собаку-пловца
#include "diving.pph"       // Добавление ныряльщика. Только пингвин
#include "eating.pph"       // Добавление питания с использованием общей группы
#include "groups.pph"       // Добавление определителя принадлежности к группе
#include "multimethod.pph"  // Добавление мультиметода
#include "mosquito.pph"     // Добавление комара

//------------------------------------------------------------------------------
int main(int argc, char* argv[]) {
  Elephant  e;
  Dog       d;
  Penguin   p;
  Worm      w;

  printf("==== Использование общей группы животных. Перемещение ====\n");

  printf("--- Прямое использование специализаций ---\n");
  struct AnyAnimal.elephant ae;   ae.@ = &e;
  struct AnyAnimal.dog      ad;   ad.@ = &d;
  struct AnyAnimal.penguin  ap;   ap.@ = &p;
  struct AnyAnimal.worm     aw;   aw.@ = &w;

  Moving<&ae>();
  Moving<&ad>();
  Moving<&ap>();
  Moving<&aw>();

  printf("--- Использование специализаций через обобщенный указатель ---\n");
  AnyAnimal* any;
  any =  &ae;
  Moving<any>();
  any =  &ad;
  Moving<any>();
  any =  &ap;
  Moving<any>();
  any =  &aw;
  Moving<any>();

  printf("\n==== Использование группы пловцов ====\n");
  printf("--- Прямое использование специализаций ---\n");
  struct SwimmingAnimal.penguin  sp;   sp.@ = &p;
  Swimming<&sp>();
  struct SwimmingAnimal.dog  sd;   sd.@ = &d;
  Swimming<&sd>();

  printf("--- Использование специализаций через обобщенный указатель ---\n");
  SwimmingAnimal* swimmer;
  swimmer =  &sp;
  Swimming<swimmer>();
  swimmer =  &sd;
  Swimming<swimmer>();

  printf("\n==== Использование группы говорунов ====\n");
  printf("--- Прямое использование специализаций ---\n");
  struct SpeakingAnimal.elephant  spe;   spe.@ = &e;
  Speaking<&spe>();
  struct SpeakingAnimal.dog  spd;   spd.@ = &d;
  Speaking<&spd>();
  struct SpeakingAnimal.penguin  spp;   spp.@ = &p;
  Speaking<&spp>();

  printf("--- Использование специализаций через обобщенный указатель ---\n");
  SpeakingAnimal* speaker;
  speaker =  &spe;
  Speaking<speaker>();
  speaker =  &spd;
  Speaking<speaker>();
  speaker =  &spp;
  Speaking<speaker>();

  printf("\n==== Использование группы ныряльщиков ====\n");
  printf("--- Прямое использование специализаций ---\n");
  struct DivingAnimal.penguin  dp;   dp.@ = &p;
  Diving<&dp>();

  printf("--- Использование специализаций через обобщенный указатель ---\n");
  DivingAnimal* diver;
  diver =  &dp;
  Diving<diver>();

  printf("\n==== Использование общей группы животных. Питание ====\n");

  printf("--- Прямое использование специализаций ---\n");
  Eating<&ae>();
  Eating<&ad>();
  Eating<&ap>();
  Eating<&aw>();

  printf("--- Использование специализаций через обобщенный указатель ---\n");
  any =  &ae;
  Eating<any>();
  any =  &ad;
  Eating<any>();
  any =  &ap;
  Eating<any>();
  any =  &aw;
  Eating<any>();

  printf("\n==== Определение принадлежности животных к конкретной группе ====\n");

  printf("--- Прямое использование специализаций ---\n");
  Group<&ae>();
  Group<&ad>();
  Group<&ap>();
  Group<&aw>();

  printf("--- Использование специализаций через обобщенный указатель ---\n");
  any =  &ae;
  Group<any>();
  any =  &ad;
  Group<any>();
  any =  &ap;
  Group<any>();
  any =  &aw;
  Group<any>();

  printf("\n==== Применение мультиметода ====\n");

  printf("--- Прямое использование специализаций ---\n");
  Multimethod<&ae, &ae>();
  Multimethod<&ae, &ad>();
  Multimethod<&ae, &ap>();
  Multimethod<&ae, &aw>();

  Multimethod<&ad, &ae>();
  Multimethod<&ad, &ad>();
  Multimethod<&ad, &ap>();
  Multimethod<&ad, &aw>();

  Multimethod<&ap, &ae>();
  Multimethod<&ap, &ad>();
  Multimethod<&ap, &ap>();
  Multimethod<&ap, &aw>();

  Multimethod<&aw, &ae>();
  Multimethod<&aw, &ad>();
  Multimethod<&aw, &ap>();
  Multimethod<&aw, &aw>();

  printf("--- Использование специализаций через обобщенный указатель ---\n");
  AnyAnimal* pae =  &ae;
  AnyAnimal* pad =  &ad;
  AnyAnimal* pap =  &ap;
  AnyAnimal* paw =  &aw;

  Multimethod<pae, pae>();
  Multimethod<pae, pad>();
  Multimethod<pae, pap>();
  Multimethod<pae, paw>();

  Multimethod<pad, pae>();
  Multimethod<pad, pad>();
  Multimethod<pad, pap>();
  Multimethod<pad, paw>();

  Multimethod<pap, pae>();
  Multimethod<pap, pad>();
  Multimethod<pap, pap>();
  Multimethod<pap, paw>();

  Multimethod<paw, pae>();
  Multimethod<paw, pad>();
  Multimethod<paw, pap>();
  Multimethod<paw, paw>();

  // Обработка для комара
  Mosquito  m;
  printf("\n!!!!! Разнообразные манипуляции с комаром !!!!!\n");

  printf("\n==== Использование общей группы животных. Перемещение ====\n");
  printf("--- Прямое использование специализаций ---\n");
  struct AnyAnimal.mosquito am;   am.@ = &m;
  Moving<&am>();
  printf("--- Использование специализаций через обобщенный указатель ---\n");
  AnyAnimal* pam;
  pam =  &am;
  Moving<pam>();

  printf("\n==== Использование группы говорунов ====\n");
  printf("--- Прямое использование специализаций ---\n");
  struct SpeakingAnimal.mosquito  spm;   spm.@ = &m;
  Speaking<&spm>();
  printf("--- Использование специализаций через обобщенный указатель ---\n");
  speaker =  &spm;
  Speaking<speaker>();

  printf("\n==== Использование общей группы животных. Питание ====\n");
  printf("--- Прямое использование специализаций ---\n");
  Eating<&am>();
  printf("--- Использование специализаций через обобщенный указатель ---\n");
  Eating<pam>();

  printf("\n==== Использование группы летунов ====\n");
  printf("--- Прямое использование специализаций ---\n");
  struct FlyingAnimal.mosquito  fm;   fm.@ = &m;
  Flying<&fm>();
  printf("--- Использование специализаций через обобщенный указатель ---\n");
  FlyingAnimal* flyer =  &fm;
  Flying<flyer>();

  printf("\n==== Определение принадлежности животных к конкретной группе ====\n");
  printf("--- Прямое использование специализаций ---\n");
  Group<&am>();
  printf("--- Использование специализаций через обобщенный указатель ---\n");
  Group<pam>();

  printf("\n==== Применение мультиметода для комара ====\n");
  printf("--- Прямое использование специализаций ---\n");
  Multimethod<&ae, &am>();
  Multimethod<&ad, &am>();
  Multimethod<&ap, &am>();
  Multimethod<&aw, &am>();

  Multimethod<&am, &ae>();
  Multimethod<&am, &ad>();
  Multimethod<&am, &ap>();
  Multimethod<&am, &aw>();
  Multimethod<&am, &am>();
  printf("--- Использование специализаций через обобщенный указатель ---\n");
  Multimethod<pae, pam>();
  Multimethod<pad, pam>();
  Multimethod<pap, pam>();
  Multimethod<paw, pam>();

  Multimethod<pam, pae>();
  Multimethod<pam, pad>();
  Multimethod<pam, pap>();
  Multimethod<pam, paw>();
  Multimethod<pam, pam>();

  return 0;
}
