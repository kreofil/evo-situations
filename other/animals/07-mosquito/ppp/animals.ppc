//==============================================================================
// animal.ppc - реализации поведения для отдельных животных и их обобщений
// Для простоты восприятия отсутствует разделение на эволюционно добавляемые
// единицы компиляции. Но проблем в этом нет.
//==============================================================================

#include <stdio.h>
#include "animals.pph"

//==============================================================================
// Функции реализующие поведение различных животных
//
// Не смотря на аргументы, они в данный момент не используются.
// Но это для упрощения. Для каждого животно возможны свои параметры,
// которые в общем случае могут передаваться
//==============================================================================

// Слон может издавать звуки
void ElephantSpeaking(Elephant* e) {printf("Ду-ду\n");}
// Он топает при ходьбе
void ElephantMoving(Elephant* e) {printf("Топ-топ\n");}

// Собака может лаять
void DogSpeaking(Dog* d) {printf("Гав-гав\n");}
// Она бегает
void DogMoving(Dog* d) {printf("Чап-чап по лужам босиком\n");}

// Пингвин может кричать, что описано в реализации прототипа
void PenguinSpeaking(Penguin* p) {printf("Линукс рулит!\n");}
// Предположим, мы не знаем как он ходит, но знаем, что он ходит.
// Зато он плавает и ныряет, а другие здесь просто лохи
void PenguinSwimming(Penguin* p) {printf("Буль-буль\n");}

// Vы знаем как он перемещается.
void WormMoving(Worm* w) {printf("Ползу в полной темноте\n");}

//==============================================================================
// Обработчики специализаций для группы, включающей всех животных
//==============================================================================

// В ней пока представлено только перемещение

// Обобщающая функция задает перемещение по умолчанию, когда не знаем способ
// void Moving<AnyAnimal* a>() = 0;
void Moving<AnyAnimal* a>() {
  printf("Я нечто. Как-то двигаюсь, но никто не знает как\n");
}
// Обработчик перемещения слона
void Moving<AnyAnimal.elephant *a>() {
  printf("Я есть слон. Я топаю: ");
  ElephantMoving(a->@);
}
// Обработчик перемещения собаки
void Moving<AnyAnimal.dog* a>() {
  printf("Я собака я бегу: ");
  DogMoving(a->@);
}
// Обработчик перемещения червя
void Moving<AnyAnimal.worm* a>() {
  printf("Я червяк. Живу в чьем-то желудке: ");
  WormMoving(a->@);
}

//==============================================================================
// Обработчики специализаций для группы, включающей пловцов
//==============================================================================

// Абстрактная обобщающая функция. Требует обязательного описания
// всех обработчиков специализаций
void Swimming<SwimmingAnimal* s>() = 0;
// Обработчик для пингвина. Он пока один в группе
void Swimming<SwimmingAnimal.penguin* s>() {
  printf("Я пингвин. Я поплыл за рыбкой: ");
  PenguinSwimming(s->@);
}

//==============================================================================
// Обработчики специализаций для группы, издающих звуки
//==============================================================================

// Обобщающая функция задает звучание по умолчанию, когда не знаем способ
void Speaking<SpeakingAnimal* s>() {
  printf("Я нечто. Но я пою как никто. Кто я?\n");
}
// Обработчик звучания слона
void Speaking<SpeakingAnimal.elephant* s>() {
  printf("Я слон. Я иду и пою: ");
  ElephantSpeaking(s->@);
}
// Обработчик звучания собаки
void Speaking<SpeakingAnimal.dog* s>() {
  printf("Караул! Воры лезут!: ");
  DogSpeaking(s->@);
}
// Обработчик звучания пингвина
void Speaking<SpeakingAnimal.penguin* s>() {
  printf("Винда маст дай! ");
  PenguinSpeaking(s->@);
}
