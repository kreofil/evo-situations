//==============================================================================
// mosquito.ppc - реализация функций, обеспечивающих обработку комара
//==============================================================================

#include <stdio.h>
#include <unistd.h>
#include "mosquito.pph"

//==============================================================================
// Функции, обеспечивающие поведение комара в различных группах
//==============================================================================

// Комар может издавать звон
void MosquitoSpeaking(Mosquito* m) {printf("З-з-з-з-з-з\n");}
// Комар летает. Непонятно, может он ходит, хотя ноги есть.
void MosquitoFlying(Mosquito* m) {printf("Все выше, к Карлсону на крыше.\n");}
// И кровь он сосет. Кровосос!
void MosquitoEating(Mosquito* m) {printf("Кровь! Свежая!!!\n");}


// Обработчик специализации, определяющие комара, как говоруна
void Speaking<SpeakingAnimal.mosquito *a>() {
  printf("Люблю позвенеть: ");
  MosquitoSpeaking(a->@);
}

// Обработчик специализации, определяющие комара, как едока
void Eating<AnyAnimal.mosquito *a>() {
  printf("Мой хоботок - мой кормилец: ");
  MosquitoEating(a->@);
}

//==============================================================================
// Обработчик специализации для группы, включающей летунов
//==============================================================================

// Абстрактная обобщающая функция. Требует обязательного описания
// всех обработчиков специализаций
void Flying<FlyingAnimal* f>() = 0;
// Обработчик для комара. Он пока один в группе
void Flying<FlyingAnimal.mosquito* f>() {
  printf("Я комар. Я полетел попить крови: ");
  MosquitoFlying(f->@);
}

//==============================================================================
// Обработчики обеспечивающие информацию о группе животны и принадлежность
// комаров к группе насекомых
//==============================================================================

//  Обработчик для насекомых
void AnimalGroupInfo<AnimalGroups.InsectGroup* ag>() {
  printf("Это группа насекомых\n");
}

// Обработчик группы для комара
void Group<AnyAnimal.mosquito* a>() {
  printf("Мне назначено судьбой пить кровь. ");
  struct AnimalGroups.InsectGroup g;
  AnimalGroupInfo<&g>();
}

//==============================================================================
// Мультиметоды, реализующие отношения между комаром и другими животными
//==============================================================================

// Слон и комар
void MultimethodElephantMosquito(Elephant* e, Mosquito* m) {
  printf("Слон - броня для комара. Не прокусить.\n");
}
// Собака и комар
void MultimethodDogMosquito(Dog* d, Mosquito* m) {
  printf("У собаки не тот хвост, чтобы прихлопнуть комара.\n");
}
// Пингвин и комар
void MultimethodPenguinMosquito(Penguin* p, Mosquito* m) {
  printf("А пингвины в Антарктиде. Комары далеко\n");
}
// Червяк и комар
void MultimethodWormMosquito(Worm* w, Mosquito* m) {
  printf("Червяк живет глубоко, комарам до него далеко\n");
}

// Комар и слон
void MultimethodMosquitoElephant(Mosquito* m, Elephant* e) {
  printf("Комар: Проблемы попить кровь у этих толстокожих слонов\n");
}
// Комар и собака
void MultimethodMosquitoDog(Mosquito* m, Dog* d) {
  printf("Комар лезет собаке в нос.\n");
}
// Комар и пингвин
void MultimethodMosquitoPenguin(Mosquito* m, Penguin* p) {
  printf("Комар решил слетать в Антарктиду в гости к Пингвину.\n");
}
// Комар и червяк
void MultimethodMosquitoWorm(Mosquito* m, Worm* w) {
  printf("Комар вообще не знает, кто такой червяк.\n");
}
// Комар и комар
void MultimethodMosquitoMosquito(Mosquito* m1, Mosquito* m2) {
  printf("Раззвенелись комары\n");
}

//------------------------------------------------------------------------------
// Прототип обобщающей функции для обработчиков с комаром
void Multimethod<AnyAnimal* a1, AnyAnimal* a2>();

// Обработчик специализации для отношения слон - комар
void Multimethod<AnyAnimal.elephant* a1, AnyAnimal.mosquito* a2>() {
  MultimethodElephantMosquito(a1->@, a2->@);
}
// Обработчик специализации для отношения собака - комар
void Multimethod<AnyAnimal.dog* a1, AnyAnimal.mosquito* a2>() {
  MultimethodDogMosquito(a1->@, a2->@);
}
// Обработчик специализации для отношения пингвин - комар
void Multimethod<AnyAnimal.penguin* a1, AnyAnimal.mosquito* a2>() {
  MultimethodPenguinMosquito(a1->@, a2->@);
}
// Обработчик специализации для отношения червяк - комар
void Multimethod<AnyAnimal.worm* a1, AnyAnimal.mosquito* a2>() {
  MultimethodWormMosquito(a1->@, a2->@);
}

// Обработчик специализации для отношения комар - слон
void Multimethod<AnyAnimal.mosquito* a1, AnyAnimal.elephant* a2>() {
  MultimethodMosquitoElephant(a1->@, a2->@);
}
// Обработчик специализации для отношения комар - собака
void Multimethod<AnyAnimal.mosquito* a1, AnyAnimal.dog* a2>() {
  MultimethodMosquitoDog(a1->@, a2->@);
}
// Обработчик специализации для отношения комар - пингвин
void Multimethod<AnyAnimal.mosquito* a1, AnyAnimal.penguin* a2>() {
  MultimethodMosquitoPenguin(a1->@, a2->@);
}
// Обработчик специализации для отношения комар - червяк
void Multimethod<AnyAnimal.mosquito* a1, AnyAnimal.worm* a2>() {
  MultimethodMosquitoWorm(a1->@, a2->@);
}

// Обработчик специализации для отношения комар - комар
void Multimethod<AnyAnimal.mosquito* a1, AnyAnimal.mosquito* a2>() {
  MultimethodMosquitoMosquito(a1->@, a2->@);
}
