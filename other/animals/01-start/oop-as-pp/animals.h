#ifndef __animal__
#define __animal__

//==============================================================================
// animal.h - содержит описание всех животных и их обобщение в единую скотину.
// Можно сделать разбиение по файлам для эволюции, но и так понятно.
// Пример тривиальный.
//==============================================================================

//------------------------------------------------------------------------------
// Описание животных и их поведений. Тоже можно размазать по файлам...

// Это слон
struct Elephant {
    // Он может издавать звуки, что описано в реализации
    void Speaking();
    // Он топает при ходьбе, что описано в реализации
    void Moving();
};

// Это собака
struct Dog {
    // Она может лаять, что описано в реализации
    void Speaking();
    // Она бегает, что описано в реализации
    void Moving();
};

// Это пингвин
struct Penguin {
    // Он может кричать, что описано в реализации прототипа
    void Speaking();
    // Предположим, мы не знаем как он ходит, но знаем, что он ходит.
    // Поэтому оставляем в ходячих по умолчанию
    // Зато он плавает и ныряет, а другие здесь просто лохи
    void Swimming();
};

// Это червяк
struct Worm {
    // Он молчит. По крайней мере мы не знаем как он поет. Убираем голос
    // Но мы знаем как он перемещается.
    void Moving();
};

//------------------------------------------------------------------------------
// Класс, обобщающий всех конкретных животных.
// Построен на объединение указателей
// Все, кто сверху - животные.
// Поэтому добавляем в него всех, но через наследование
// Почему через указатель? Потому что одно животное-экземпляр можно добавить
// к разным обобщениям
struct AnyAnimal {
    // Все животные могут иметь общие признаки, но с разными способами реализации
    // Например, перемещаться. Даже если мы не знаем как. Обобщим перемещение.
    // Для этого используем виртуальный обработчик по умолчанию
    virtual void Moving();
};
// Слон, принадлежащий к группе всех животных
struct ElephantAsAnimal:AnyAnimal {
    Elephant* elephant;
    virtual void Moving(); // Знаем, как он ходит
    ElephantAsAnimal(Elephant* e):elephant(e){}
};
// Собака, принадлежащая к группе всех животных
struct DogAsAnimal:AnyAnimal {
    Dog* dog;
    virtual void Moving(); // Знаем, как она бегает
    DogAsAnimal(Dog* d):dog(d){}
};
// Пингвин, принадлежащий к группе всех животных
struct PenguinAsAnimal:AnyAnimal {
    Penguin* penguin;
    // Перемещение по умолчанию. Мы не видели, как пингвин ходит
    PenguinAsAnimal(Penguin* p):penguin(p){}
};
// Червяк, принадлежащий к группе всех животных
struct WormAsAnimal:AnyAnimal {
    Worm* worm;
    virtual void Moving(); // Знаем, как он ползает
    WormAsAnimal(Worm* w):worm(w){}
};

//------------------------------------------------------------------------------
// Но можно создать обобщение для ограниченной группы животных, например,
// только для плавающих.
// Пока только пингвин. Поэтому включаем в эту группу только его
struct SwimmingAnimal {
    // Для этой группы своя обобщающая функция. Пусть будет абстрактной
    virtual void Swimming() = 0;
};
// Пингвин, принадлежащий к пловцам
struct PenguinAsSwimmingAnimal:SwimmingAnimal {
    Penguin* penguin;
    virtual void Swimming(); // Знаем, как он плавает
    PenguinAsSwimmingAnimal(Penguin* p):penguin(p){}
};

//------------------------------------------------------------------------------
// И еще одна общая группа тех, кто издает звуки. Видимо, без червяка
// Пока здесь следующий состав
struct SpeakingAnimal {
    // Для этой группы своя обобщающая функция. Обработчик по умолчанию
    virtual void Speaking();
};
// Слон, принадлежащий к группе поющих
struct ElephantAsSpeakingAnimal:SpeakingAnimal {
    Elephant* elephant;
    virtual void Speaking(); // Знаем, как он дудит
    ElephantAsSpeakingAnimal(Elephant* e):elephant(e){}
};
// Собака, принадлежащая к группе звучащих
struct DogAsSpeakingAnimal:SpeakingAnimal {
    Dog* dog;
    virtual void Speaking(); // Знаем, как она лает
    DogAsSpeakingAnimal(Dog* d):dog(d){}
};
// Пингвин, принадлежащий к группе всех животных
struct PenguinAsSpeakingAnimal:SpeakingAnimal {
    Penguin* penguin;
    virtual void Speaking(); // Знаем, как он хамит Гейтсу
    PenguinAsSpeakingAnimal(Penguin* p):penguin(p){}
};

#endif // __animal__
