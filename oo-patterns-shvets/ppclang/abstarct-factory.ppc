#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Каждый отдельный продукт семейства продуктов должен иметь базовый интерфейс.
// Все вариации продукта должны реализовывать этот интерфейс.
typedef struct AbstractProductA {}<> AbstractProductA;

char* UsefulFunctionA<AbstractProductA* p>() {return NULL;} //= 0;

// Конкретные продукты создаются соответствующими Конкретными Фабриками.
// Дополнительно представлены специализации конкретных продуктов
typedef struct ConcreteProductA1 {}<> ConcreteProductA1;
AbstractProductA + <ConcreteProductA1;>;

char* UsefulFunctionA<AbstractProductA.ConcreteProductA1* p>() {
    return "The result of the product A1.";
}

typedef struct ConcreteProductA2 {}<> ConcreteProductA2;
AbstractProductA + <ConcreteProductA2;>;

char* UsefulFunctionA<AbstractProductA.ConcreteProductA2* p>() {
  return "The result of the product A2.";
}

// Базовый интерфейс другого продукта. Все продукты могут взаимодействовать друг
// с другом, но правильное взаимодействие возможно только между продуктами одной
// и той же конкретной вариации.
typedef struct AbstractProductB {}<> AbstractProductB;

// Продукт B способен работать самостоятельно...
char* UsefulFunctionB<AbstractProductB* p>() {return NULL;} //= 0;

// ...а также взаимодействовать с Продуктами A той же вариации.
// Абстрактная Фабрика гарантирует, что все продукты, которые она создает,
// имеют одинаковую вариацию и, следовательно, совместимы.
void AnotherUsefulFunctionB<AbstractProductB* p>
                           (AbstractProductA *collaborator, char* buf) {} //= 0;

// Конкретные продукты создаются соответствующими Конкретными Фабриками.
// Дополнительно представлены специализации конкретных продуктов
typedef struct ConcreteProductB1 {}<> ConcreteProductB1;
AbstractProductB + <ConcreteProductB1;>;

char* UsefulFunctionB<AbstractProductB.ConcreteProductB1* p>() {
  return "The result of the product B1.";
}

// Продукт B1 может корректно работать только с Продуктом A1. Тем не менее, он
// принимает любой экземпляр Абстрактного Продукта А в качестве аргумента.
void AnotherUsefulFunctionB<AbstractProductB.ConcreteProductB1* p>
                            (AbstractProductA *collaborator, char* buf) {
  char* result = UsefulFunctionA<collaborator>();
  strcpy(buf, "The result of the B1 collaborating with ( ");
  strcat(buf,result);
  strcat(buf, " )");
}

typedef struct ConcreteProductB2 {}<> ConcreteProductB2;
AbstractProductB + <ConcreteProductB2;>;

char* UsefulFunctionB<AbstractProductB.ConcreteProductB2* p>() {
  return "The result of the product B2.";
}

// Продукт B2 может корректно работать только с Продуктом A2. Тем не менее, он
// принимает любой экземпляр Абстрактного Продукта А в качестве аргумента.
void AnotherUsefulFunctionB<AbstractProductB.ConcreteProductB2* p>
(AbstractProductA *collaborator, char* buf) {
  char* result = UsefulFunctionA<collaborator>();
  strcpy(buf, "The result of the B2 collaborating with ( ");
  strcat(buf,result);
  strcat(buf, " )");
}

// Интерфейс Абстрактной Фабрики объявляет набор методов, которые возвращают
// различные абстрактные продукты. Эти продукты называются семейством и связаны
// темой или концепцией высокого уровня. Продукты одного семейства обычно могут
// взаимодействовать между собой. Семейство продуктов может иметь несколько
// вариаций, но продукты одной вариации несовместимы с продуктами другой.
typedef struct AbstractFactory {}<> AbstractFactory;

AbstractProductA *CreateProductA<AbstractFactory* f>() {return NULL;} //= 0;
AbstractProductB *CreateProductB<AbstractFactory* f>() {return NULL;} //= 0;

// Конкретная Фабрика производит семейство продуктов одной вариации. Фабрика
// гарантирует совместимость полученных продуктов. Обратите внимание, что
// сигнатуры методов Конкретной Фабрики возвращают абстрактный продукт, в то
// время как внутри метода создается экземпляр конкретного продукта.

// Конкретные фабрики можно заменить на расширяемый перечислимый тип,
// так как они содержат только интерфейс, выносимый в ППП наружу!!!

//!!! typedef struct ConcreteFactory1 {} ConcreteFactory1;
//!!! AbstractFactory + < ConcreteFactory1; >;
AbstractFactory + <ConcreteFactory1: void;>;

AbstractProductA *CreateProductA<AbstractFactory.ConcreteFactory1* f>() {
    return create_spec(AbstractProductA.ConcreteProductA1);
}
AbstractProductB *CreateProductB<AbstractFactory.ConcreteFactory1* f>() {
  return create_spec(AbstractProductB.ConcreteProductB1);
}

// Каждая Конкретная Фабрика имеет соответствующую вариацию продукта.
//!!! typedef struct ConcreteFactory2 {} ConcreteFactory2;
//!!! AbstractFactory + < ConcreteFactory2; >;
AbstractFactory + <ConcreteFactory2: void;>;

AbstractProductA *CreateProductA<AbstractFactory.ConcreteFactory2* f>() {
  return create_spec(AbstractProductA.ConcreteProductA2);
}
AbstractProductB *CreateProductB<AbstractFactory.ConcreteFactory2* f>() {
  return create_spec(AbstractProductB.ConcreteProductB2);
}

// Клиентский код работает с фабриками и продуктами только через абстрактные
// типы: Абстрактная Фабрика и Абстрактный Продукт. Это позволяет передавать
// любой подкласс фабрики или продукта клиентскому коду, не нарушая его.
void ClientCode(AbstractFactory *factory) {
  AbstractProductA *product_a = CreateProductA<factory>();
  AbstractProductB *product_b = CreateProductB<factory>();
  printf("%s\n", UsefulFunctionB<product_b>());
  char buf[256];
  AnotherUsefulFunctionB<product_b>(product_a, buf);
  printf("%s\n", buf);
  free(product_a);
  free(product_b);
}

int main() {
  printf("Client: Testing client code with the first factory type:\n");
  AbstractFactory *f1 = create_spec(AbstractFactory.ConcreteFactory1);
  ClientCode(f1);
  free(f1);
  printf("\n");
  printf("Client: Testing the same client code with the second factory type:\n");
  AbstractFactory *f2 = create_spec(AbstractFactory.ConcreteFactory2);
  ClientCode(f2);
  free(f2);
  printf("\n");
  return 0;
}
