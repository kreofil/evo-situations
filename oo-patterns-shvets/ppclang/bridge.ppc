#include <stdio.h>
#include <stdlib.h>
#include <string.h>


// Реализация устанавливает интерфейс для всех классов реализации. Он не должен
// соответствовать интерфейсу Абстракции. На практике оба интерфейса могут быть
// совершенно разными. Как правило, интерфейс Реализации предоставляет только
// примитивные операции, в то время как Абстракция определяет операции более
// высокого уровня, основанные на этих примитивах.
typedef struct Implementation {}<> Implementation;
char* OperationImplementation<Implementation* i>() {return NULL;} //= 0;

// Каждая Конкретная Реализация соответствует определённой платформе и реализует
// интерфейс Реализации с использованием API этой платформы.
typedef struct ConcreteImplementationA {} ConcreteImplementationA;
Implementation + <ConcreteImplementationA;>;
char* OperationImplementation<Implementation.ConcreteImplementationA* i>() {
  return "ConcreteImplementationA: Here's the result on the platform A.\n";
}

typedef struct ConcreteImplementationB {} ConcreteImplementationB;
Implementation + <ConcreteImplementationB;>;
char* OperationImplementation<Implementation.ConcreteImplementationB* i>() {
  return "ConcreteImplementationB: Here's the result on the platform B.\n";
}

// Абстракция устанавливает интерфейс для «управляющей» части двух иерархий
// классов. Она содержит ссылку на объект из иерархии Реализации и делегирует
// ему всю настоящую работу.
typedef struct Abstraction {
  // @var Implementation
  Implementation* implementation;
}<> Abstraction;

void AbstractionInit(Abstraction* a, Implementation* i) {
  a->implementation = i;
}

void Operation<Abstraction* a>(char* str) {
  strcpy(str, "Abstraction: Base operation with:\n");
  strcat(str, OperationImplementation<a->implementation>());
}

// Можно расширить Абстракцию без изменения классов Реализации.
typedef struct ExtendedAbstraction {} ExtendedAbstraction;
Abstraction + <ExtendedAbstraction;>;

void Operation<Abstraction.ExtendedAbstraction* a>(char* str) {
  strcpy(str, "ExtendedAbstraction: Extended operation with:\n");
  strcat(str, OperationImplementation<a->implementation>());
}

// За исключением этапа инициализации, когда объект Абстракции связывается с
// определённым объектом Реализации, клиентский код должен зависеть только от
// класса Абстракции. Таким образом, клиентский код может поддерживать любую
// комбинацию абстракции и реализации.
void ClientCode(Abstraction* abstraction) {
  // ...
  char str[256];
  Operation<abstraction>(str);
  printf("%s", str);
  // ...
}

// Клиентский код должен работать с любой предварительно сконфигурированной
// комбинацией абстракции и реализации.
int main() {
  Implementation* implementation =
                  create_spec(Implementation.ConcreteImplementationA);
  Abstraction* abstraction = create_spec(Abstraction);
  AbstractionInit(abstraction, implementation);
  ClientCode(abstraction);
  printf("\n");
  free(implementation);
  free(abstraction);

  implementation = create_spec(Implementation.ConcreteImplementationB);
  abstraction = create_spec(Abstraction.ExtendedAbstraction);
  AbstractionInit(abstraction, implementation);
  ClientCode(abstraction);

  free(implementation);
  free(abstraction);

  return 0;
}