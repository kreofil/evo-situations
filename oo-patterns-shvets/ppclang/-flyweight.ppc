// #include <sched.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>


// Паттерн Легковес
// Назначение: Позволяет вместить бóльшее количество объектов в отведённую
// оперативную память. Легковес экономит память, разделяя общее состояние
// объектов между собой, вместо хранения одинаковых данных в каждом объекте.

//------------------------------------------------------------------------------
// Общее состояние для всех объектов
typedef struct SharedState {
  char brand[256];
  char model[256];
  char color[256];
} SharedState;

void SharedStateInit(SharedState* s, char* brand, char* model, char* color) {
  strcpy(s->brand, brand);
  strcpy(s->model, model);
  strcpy(s->color, color);
}

void SharedStateOut(SharedState* ss) {
  printf("[ %s , %s, %s ]", ss->brand, ss->model, ss->color);
}

// Возвращает хеш строки Легковеса для данного состояния.
char* GetKey(SharedState *ss, char* keyValue) {
  strcpy(keyValue, ss->brand);
  strcat(keyValue, "_");
  strcat(keyValue, ss->model);
  strcat(keyValue, "_");
  strcat(keyValue, ss->color);
  return keyValue;
}

//------------------------------------------------------------------------------
// Уникальное состояние
typedef struct UniqueState {
  char owner[256];
  char plates[256];
} UniqueState;

void UniqueStateInit(UniqueState* s, char* owner, char* plates) {
  strcpy(s->owner, owner);
  strcpy(s->plates, plates);
}

void UniqueStateOut(UniqueState* us) {
  printf("[ %s , %s ]", us->owner, us->plates);
}

//------------------------------------------------------------------------------
// Легковес хранит общую часть состояния (также называемую внутренним
// состоянием), которая принадлежит нескольким реальным бизнес-объектам.
// Легковес принимает оставшуюся часть состояния (внешнее состояние, уникальное
// для каждого объекта)  через его параметры метода.
typedef struct Flyweight {
  SharedState *sharedState;
} Flyweight;

void FlyweightInitSharedState(Flyweight* f, SharedState *sharedState) {
  f->sharedState = malloc(sizeof(SharedState));
  SharedStateInit(f->sharedState,
                  sharedState->brand, sharedState->model, sharedState->color);
}

void FlyweightInitFlyweight(Flyweight* f, Flyweight* other) {
  f->sharedState = malloc(sizeof(SharedState));
  SharedStateInit(f->sharedState, other->sharedState->brand,
                  other->sharedState->model, other->sharedState->color);
}

void FlyweightDelete(Flyweight* f) {
  free(f->sharedState);
}

SharedState *SharedStateGet(Flyweight* f) {
  return f->sharedState;
}

void Operation(Flyweight* f, UniqueState* uniqueState) {
  printf("Flyweight: Displaying shared (");
  SharedStateOut(f->sharedState);
  printf(") and unique (");
  UniqueStateOut(uniqueState);
  printf(") state.\n");
}

//------------------------------------------------------------------------------
// Простейшая имитация пары неупорядоченного мэпа. Только для демонстрации.
typedef struct Pair {
  char key[256];
  Flyweight flyweight;
} Pair;

typedef struct Map {
  int size;       // Число легковесов
  Pair pair[20];  // Массив легковесов
} Map;

// Начальная инициализация Map
void MapInit(Map* m) {m->size = 0;}
// Очистка Map
void MapClear(Map* m) {m->size = 0;}
// Поиск значения в Map по ключу возращается индекс от 0 и до size-1
// или -1 при отсутствии значения
int MapFind(Map* m, char* key) {
  for(int i = 0; i < m->size; ++i) {
    if(!strcmp(m->pair[i].key, key)) {
      return i;
    }
  }
  return -1;
}

//------------------------------------------------------------------------------
// Фабрика Легковесов создает объекты-Легковесы и управляет ими. Она
// обеспечивает правильное разделение легковесов. Когда клиент запрашивает
// легковес, фабрика либо возвращает существующий экземпляр, либо создает новый,
// если он ещё не существует.
typedef struct FlyweightFactory {
  // std::unordered_map<std::string, Flyweight> flyweights_;
  // Вместо мэпа простой одномерный массив пар
  Map flyweights[20];
}FlyweightFactory ;

void FlyweightFactoryLoad(FlyweightFactory* ff, Pair* shareStates) {
  char keyValue[256]; // Хранение текущего ключа
  for (int i = 0; i < ff->flyweights[i].size; ++i) {
    GetKey(shareStates[i].flyweight.sharedState, keyValue);
    strcpy(ff->flyweights[i].pair.key, keyValue);
    ff->flyweights[i].pair.flyweight.sharedState = malloc(sizeof(SharedState));
    FlyweightInitSharedState(&(sharStates[i].pair.flyweight), &(shareStates[i]))
  }
}

// Возвращает существующий Легковес с заданным состоянием или создает новый.
Flyweight* GetFlyweight(FlyweightFactory* ff, SharedState *sharedState) {
    char key[256];
    GetKey(shared_state, key);
    Map* m = ff->flyweights;
    int index = MapFind(m, key);
    if (index == -1) {
      printf("FlyweightFactory: Can't find a flyweight, creating new one.\n");
      // Добавление нового общего состояния в Map
      MapAppend(m, index, key, sharedState);
    }
    else {
      printf("FlyweightFactory: Reusing existing flyweight.\n");
    }
    return ff->flyweights[index];
}

void ListFlyweights(FlyweightFactory* ff) {
    size_t count = this->flyweights_.size();
    printf("\nFlyweightFactory: I have " %d " flyweights:\n",
           ff->flyweights.size);
    for (int i = 0; i < ff->flyweights.size) {
      printf("%s\n", ff->flyweights.pair[i].key);
    }
}

// ...
void AddCarToPoliceDatabase(
    FlyweightFactory* ff, char* plates, char* owner,
    char* brand, char* model, char* color) {
    printf("\nClient: Adding a car to database.\n");
    SharedState ss;
    SharedStateInit(&ss, brand, model, color);
    Flyweight* flyweight = GetFlyweight(ff, ss);
    // Клиентский код либо сохраняет, либо вычисляет внешнее состояние и
    // передает его методам легковеса.
    flyweight.Operation({owner, plates});
}


// Клиентский код обычно создает кучу предварительно заполненных легковесов на
// этапе инициализации приложения.


int main() {
  FlyweightFactory *factory =
  new FlyweightFactory({{"Chevrolet", "Camaro2018", "pink"}, {"Mercedes Benz", "C300", "black"}, {"Mercedes Benz", "C500", "red"}, {"BMW", "M5", "red"}, {"BMW", "X6", "white"}});
    factory->ListFlyweights();

    AddCarToPoliceDatabase(*factory,
                            "CL234IR",
                            "James Doe",
                            "BMW",
                            "M5",
                            "red");

    AddCarToPoliceDatabase(*factory,
                            "CL234IR",
                            "James Doe",
                            "BMW",
                            "X1",
                            "red");
    factory->ListFlyweights();
    delete factory;

    return 0;
}