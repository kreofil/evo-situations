//------------------------------------------------------------------------------
// ‘айл DoubleClass.cpp - определ€ет методы класса, 
// задающего действительное число.
//------------------------------------------------------------------------------

#include <iostream>
using namespace std;

#include "IntClass.h"
#include "DoubleClass.h"

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// ¬ычитание из "мен€" второго числа. ¬торое число €вл€етс€ аргументом
Number* Double::SubtractDirect(Number& num2)
{
    // ¬ызываетс€ виртуальный метод, осуществл€ющий 
    // обработку второго аргумента.
    DoubleFace* d_num = static_cast<DoubleFace*>(&num2);
    return d_num->SubtFromFirstDouble(_value);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// ¬ычитание "мен€" из первого числа. ѕервое число €вл€етс€ аргументом
Number* Double::SubtractReverse(Number& num1)
{
    // ¬ызываетс€ виртуальный метод, осуществл€ющий 
    // обработку перавого аргумента.
    DoubleFace* d_num = static_cast<DoubleFace*>(&num1);
    return d_num->SubtDouble(_value);
}


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// ¬ывод значени€ числа в стандартный поток
void Double::StdOut()
{
  cout << "It is Double. Value = " << _value << endl;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// ѕереопределение методов вышесто€ших пирамидальных классов

// ¬ычитание второго операнда из первого, целочисленного, аргумента
// ѕродолжатель диспетчеризации, начатой SubtractDirect
Number* Double::SubtFromFirstInt(int v)
{
  // ѕервый аргумент передаетс€, а второй находитс€ внутри
  return new Double(v - _value);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// ¬ычитание из второго операнда первого, целочисленного, аргумента
// ѕродолжатель диспетчеризации, начатой SubtractReverse
Number* Double::SubtInt(int v)
{
  // ѕервый аргумент передаетс€, а второй находитс€ внутри
  return new Double(_value - v);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// ƒалее идут методы своего интерфейсного класса
// и, следовательно, переопредел€емые.

// ¬ычитание второго операнда из первого, действительного, аргумента
// ѕродолжатель диспетчеризации, начатой SubtractDirect
Number* Double::SubtFromFirstDouble(double v)
{
  // ѕервый аргумент передаетс€, а второй находитс€ внутри
  return new Double(v - _value);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// ¬ычитание из второго операнда первого, действительного, аргумента
// ѕродолжатель диспетчеризации, начатой SubtractReverse
Number* Double::SubtDouble(double v)
{
  // ѕервый аргумент передаетс€, а второй находитс€ внутри
  return new Double(_value - v);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
//  онструктор, обеспечивающий инициализацию числа.
Double::Double(double v): _value(v)
{_rank = 1;}
