//------------------------------------------------------------------------------
// ‘айл IntClass.cpp - определ€ет методы класса, задающего целое число.
//------------------------------------------------------------------------------

#include <iostream>
using namespace std;

#include "IntClass.h"

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// ¬ычитание первого числа из второго. ѕервое число - сам класс
// ¬торое число €вл€етс€ аргументом
//Number* Int::Subtract(Number* num2)
Number* Int::Subtract(Number& num2)
{
  // ѕри первом целочисленном аргументе нет проблем выйти на метод
  // ќпредел€ющий вычиатание второго аргумента в пирамидальной иерархии.
  //return static_cast<IntFace*>(num2)->SubtFromFirstInt(_value);
  IntFace* i_num = static_cast<IntFace*>(&num2);
  return i_num->SubtFromFirstInt(_value);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// ¬ывод значени€ числа в стандартный поток
void Int::StdOut()
{
  cout << "It is Int. Value = " << _value << endl;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// ƒалее идут методы своего интерфейсного класса
// и, следовательно, переопредел€емые.

// ¬ычитание второго операнда из первого, целочисленного, аргумента
Number* Int::SubtFromFirstInt(int v)
{
  // ѕервый аргумент передаетс€, а второй находитс€ внутри
  return new Int(v - _value);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
//  онструктор, обеспечивающий инициализацию числа.
Int::Int(int v): _value(v)
{}
