//------------------------------------------------------------------------------
// Файл DoubleClass.cpp - определяет методы класса,
// задающего действительное число.
//------------------------------------------------------------------------------

#include <iostream>
using namespace std;

#include "int.h"
#include "double.h"

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Вычитание первого числа из второго. Первое число - сам класс
// Второе число является аргументом
Number* Double::Subtract(Number& num2)
{
  // В начале надо отсечь верхние классы, не "знающие" о существовании нижних.
    if(Int* pInt = dynamic_cast<Int*>(&num2))
  {
    // Второй аргумент - целое число. Происходит непосредственное его
    // вычитание из первого после RTTI.
    return new Double(_value - pInt->GetValue());
  }
  else
  {
    // Вызывается виртуальный метод, осуществляющий
    // обработку второго аргумента.
    DoubleFace* d_num = static_cast<DoubleFace*>(&num2);
    return d_num->SubtFromFirstDouble(_value);
  }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Вывод значения числа в стандартный поток
void Double::StdOut()
{
  cout << "It is Double. Value = " << _value << endl;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Переопределение методов вышестояших пирамидальных классов

// Вычитание второго операнда из первого, целочисленного, аргумента
Number* Double::SubtFromFirstInt(int v)
{
  // Первый аргумент передается, а второй находится внутри
  return new Double(v - _value);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Далее идут методы своего интерфейсного класса
// и, следовательно, переопределяемые.

// Вычитание второго операнда из первого, действительного, аргумента
Number* Double::SubtFromFirstDouble(double v)
{
  // Первый аргумент передается, а второй находится внутри
  return new Double(v - _value);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Конструктор, обеспечивающий инициализацию числа.
Double::Double(double v): _value(v)
{}
