//------------------------------------------------------------------------------
// Файл IntClass.cpp - определяет методы класса, задающего целое число.
//------------------------------------------------------------------------------

#include <iostream>
using namespace std;

#include "IntClass.h"

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// Вычитание первого числа из второго. Первое число - сам класс
// Второе число является аргументом
Number* Int::Subtract(Number& num2)
{
    if(Int* pInt = dynamic_cast<Int*>(&num2))
	{
		// Второй аргумент - целое число. Происходит непосредственное его 
		// вычитание из первого после RTTI.
		return new Int(pInt->GetValue() - _value);
	}
	else
	{
		// Вызывается метод, осуществляющий обработку второго 
		// не целочисленного аргумента. Для одного Int работать не будет
		// Но используется при эволюционном пирамидальном наращивании.
		return num2.SubtFrom(*this);
	}
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// Вспомогательный метод, осуществляющий передачу первого аргумента 
// в объект, являющийся вторым аргументом, для выполнения вычитания.
// В данной ситуации является бесполезным, так как сложение целых
// чисел осуществляется раньше и функция недостижима. 
// Но заглушка должна стоять.
Number* Int::SubtFrom(Number&)
{
	return 0;
	// Возможно, в реальном приложении должно порождаться исключение.
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// Вывод значения числа в стандартный поток
/*
void Int::StdOut()
{
	cout << "It is Int. Value = " << _value << endl;
}
*/

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// Конструктор, обеспечивающий инициализацию числа.
Int::Int(int v): _value(v)
{}
