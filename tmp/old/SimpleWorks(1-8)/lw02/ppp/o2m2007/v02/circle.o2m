(*******************************************************************************
| circle.o: содержит модуль circle с процедурами и типами, 
| осуществляющими обработку кругов
*******************************************************************************)

MODULE circle; 
IMPORT In, Out, FileIO, figure;

(******************************************************************************)
CONST PI = 3.14159265;

(******************************************************************************)
TYPE  
  (* Структуры данных описывающие круг *)

  (* Указатель на круг *)
  Pcirc* = POINTER TO circ;

  (* Запись, определяющая структуру круга *)
  circ* = RECORD
    r* : INTEGER (* радиус круга *)
  END;               

(******************************************************************************)
(* Процедура динамического создания и инициализации нового круга *)
PROCEDURE New*(r: INTEGER): Pcirc;
VAR tmp : Pcirc;
BEGIN     
    NEW(tmp);            
    tmp^.r := r;
    RETURN tmp
END New; 

(******************************************************************************)
(* Процедура инициализации уже существующего круга *)
PROCEDURE Init*(VAR c: circ; r: INTEGER);
BEGIN     
    c.r := r;
END Init; 

(******************************************************************************)
(* Процедура вычисления периметра круга *)
PROCEDURE Perimeter*(VAR c: circ) : REAL;
VAR
BEGIN          
  RETURN 2 * PI * c.r
END Perimeter;

(******************************************************************************)
(* Процедура Заполнения круга из входного потока *)
(******************************************************************************)
PROCEDURE Input*(VAR c: circ);
BEGIN     
  Out.String("r = "); In.Int(c.r); 
END Input; 

(******************************************************************************)
(* Процедура вывода, использующая передачу параметра-переменной *)
PROCEDURE Output*(VAR c: circ);
BEGIN          
  Out.String("Circle: r = "); Out.Int(c.r, 0); 
  Out.String(",   perimemter = "); Out.Real(Perimeter(c), 0); 
  Out.Ln;
END Output;

(******************************************************************************)
(* Процедура Заполнения круга из файла *)
(******************************************************************************)
PROCEDURE FileInput*(VAR inFile : FileIO.TFile; VAR c: circ);
VAR
  f : INTEGER;
BEGIN     
  f := inFile.ReadInt(c.r); 
END FileInput; 

(******************************************************************************)
(* Процедура вывода в файл, использующая передачу параметра-переменной *)
PROCEDURE FileOutput*(VAR outFile : FileIO.TFile; VAR c: circ);
VAR 
  flag : INTEGER;
BEGIN     
  flag := outFile.WriteString("Circle: r = "); 
  flag := outFile.WriteInt(c.r, 7); 
  flag := outFile.WriteString(",   perimemter = "); 
  flag := outFile.WriteReal(Perimeter(c), 7); 
  flag := outFile.Ln();
END FileOutput;

(******************************************************************************)
END circle.
