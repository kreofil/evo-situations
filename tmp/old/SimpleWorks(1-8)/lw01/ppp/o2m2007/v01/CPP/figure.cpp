/////////////////////////////////////////////
// This file was generated by O2M compiler //
/////////////////////////////////////////////

//MODULE figure;
#include "figure.h"
using namespace figure;

//IMPORT
//In
//Out
//FileIO
//rectangle
//triangle

//VAR

/////////////////////////////////////////////
//COMMON PROCEDURE Perimeter
double figure::Perimeter(fig* f) {
	//handler selection
	typedef double (*O2M_TYPE) (fig* f);
	O2M_TYPE O2M_PROC;
	O2M_PROC = (O2M_TYPE)O2M_COMMON_figure_Perimeter(f);
	if (O2M_PROC) return O2M_PROC(f);
	//default handler absent
	exit(0);
}
//END Perimeter;

/////////////////////////////////////////////
//HANDLER PROCEDURE Perimeter
double figure::O2M_HANDLER_Perimeter_0(fig* r) {
	double O2M_RESULT;
//VAR
//BEGIN
	O2M_RESULT = rectangle::Perimeter(r->O2M_SPEC_rectangle_rect);
	goto O2M_RETURN;
	O2M_RETURN:;
	return O2M_RESULT;
}
//END Perimeter;

/////////////////////////////////////////////
//HANDLER PROCEDURE Perimeter
double figure::O2M_HANDLER_Perimeter_1(fig* t) {
	double O2M_RESULT;
//VAR
//BEGIN
	O2M_RESULT = triangle::Perimeter(t->O2M_SPEC_triangle_trian);
	goto O2M_RETURN;
	O2M_RETURN:;
	return O2M_RESULT;
}
//END Perimeter;

/////////////////////////////////////////////
//COMMON PROCEDURE Output
void figure::Output(fig* f) {
	//handler selection
	typedef void (*O2M_TYPE) (fig* f);
	O2M_TYPE O2M_PROC;
	O2M_PROC = (O2M_TYPE)O2M_COMMON_figure_Output(f);
	if (O2M_PROC) {
		O2M_PROC(f);
		return;
	}
	//default handler absent
	exit(0);
}
//END Output;

/////////////////////////////////////////////
//HANDLER PROCEDURE Output
void figure::O2M_HANDLER_Output_2(fig* r) {
//VAR
//BEGIN
	rectangle::Output(r->O2M_SPEC_rectangle_rect);
}
//END Output;

/////////////////////////////////////////////
//HANDLER PROCEDURE Output
void figure::O2M_HANDLER_Output_3(fig* t) {
//VAR
//BEGIN
	triangle::Output(t->O2M_SPEC_triangle_trian);
}
//END Output;

/////////////////////////////////////////////
//COMMON PROCEDURE FileOutput
void figure::FileOutput(FileIO::TFile* outFile, fig* f) {
	//handler selection
	typedef void (*O2M_TYPE) (FileIO::TFile* outFile, fig* f);
	O2M_TYPE O2M_PROC;
	O2M_PROC = (O2M_TYPE)O2M_COMMON_figure_FileOutput(f);
	if (O2M_PROC) {
		O2M_PROC(outFile, f);
		return;
	}
	//default handler absent
	exit(0);
}
//END FileOutput;

/////////////////////////////////////////////
//HANDLER PROCEDURE FileOutput
void figure::O2M_HANDLER_FileOutput_4(FileIO::TFile* outFile, fig* r) {
//VAR
//BEGIN
	rectangle::FileOutput(outFile, r->O2M_SPEC_rectangle_rect);
}
//END FileOutput;

/////////////////////////////////////////////
//HANDLER PROCEDURE FileOutput
void figure::O2M_HANDLER_FileOutput_5(FileIO::TFile* outFile, fig* t) {
//VAR
//BEGIN
	triangle::FileOutput(outFile, t->O2M_SPEC_triangle_trian);
}
//END FileOutput;

/////////////////////////////////////////////
//MODULE INITIALIZATION
void figure::O2M_SYS_figure() {
	//imports initialisation
	static bool O2M_SYS_was_started(false);
	if (O2M_SYS_was_started) return;
	O2M_SYS_was_started = true;
	In::O2M_SYS_In();
	Out::O2M_SYS_Out();
	FileIO::O2M_SYS_FileIO();
	rectangle::O2M_SYS_rectangle();
	triangle::O2M_SYS_triangle();
//BEGIN
}
//END figure.
